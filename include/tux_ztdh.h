#ifndef TUX_ZTDH_H
#define TUX_ZTDH_H

#include <dhutils.h>
#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <tztca.h>

#define GPE_LOG_TYPE_STDOUT   0
#define GPE_LOG_TYPE_STDERR   1
#define GPE_LOG_TYPE_TUXULOG  2
#define GPE_LOG_TYPE_DEFAULT  3

#define LLELENGTHINBYTES (128 / 8)
#define FD_ATTR_INITIATOR          0x00000001
#define FD_ATTR_RESPONDER          0x00000002

/*
 * Prime bits: 768
 * Exponent bits: 128
 */
static unsigned char dhParamsBER40[219] =
{
    0x30,  0x81,  0xd8,  0x06,  0x09,  0x2a,  0x86,  0x48,  0x86,  0xf7,
    0x0d,  0x01,  0x03,  0x01,  0x30,  0x81,  0xca,  0x02,  0x61,  0x00,
    0xd3,  0xe2,  0x74,  0x3b,  0x87,  0x9f,  0xd3,  0x20,  0x3b,  0xde,
    0x2f,  0x71,  0x7e,  0xfb,  0x82,  0xd5,  0x60,  0x2a,  0x08,  0xfb,
    0x79,  0x58,  0x4c,  0x53,  0x35,  0x7a,  0x2b,  0x9b,  0x88,  0xee,
    0xb8,  0xba,  0xe7,  0x5c,  0xd9,  0x8f,  0x2d,  0xef,  0x1f,  0x4f,
    0x9f,  0xa4,  0x7e,  0xe3,  0x86,  0x59,  0x27,  0xc6,  0xf8,  0xc9,
    0x7d,  0x93,  0x47,  0xb4,  0x97,  0x07,  0xb7,  0xfa,  0x8e,  0x47,
    0x23,  0x36,  0xfe,  0xd0,  0x45,  0xc1,  0xa3,  0xb2,  0x97,  0xa5,
    0x4e,  0x82,  0xda,  0x5c,  0xee,  0x25,  0x95,  0x0d,  0xcc,  0xa7,
    0x23,  0x34,  0xd4,  0xd7,  0xa2,  0x4e,  0x15,  0x3e,  0x9c,  0xb6,
    0xa1,  0x97,  0xfe,  0xfe,  0x8c,  0xc3,  0x02,  0x61,  0x00,  0x86,
    0x77,  0x81,  0x8a,  0x30,  0x89,  0x54,  0x50,  0xd3,  0x11,  0xb7,
    0x50,  0xbc,  0x96,  0x9b,  0x24,  0x23,  0xef,  0x86,  0xf1,  0x49,
    0x7c,  0x50,  0x16,  0xdf,  0xad,  0xec,  0x90,  0x4b,  0x40,  0xf5,
    0xe5,  0x6d,  0xf0,  0x3b,  0xa9,  0xec,  0xa9,  0xbc,  0x4e,  0x0c,
    0xdd,  0x21,  0x4e,  0x82,  0xbd,  0x1f,  0x36,  0xa6,  0x57,  0x13,
    0x84,  0xec,  0x04,  0x0e,  0x8d,  0x96,  0x85,  0x0d,  0x97,  0xeb,
    0x49,  0xe3,  0x5b,  0x3f,  0x53,  0x8b,  0x04,  0x66,  0x6e,  0xe6,
    0x7d,  0x84,  0x43,  0xad,  0xce,  0x3c,  0x8e,  0x41,  0x1e,  0x48,
    0x74,  0x08,  0xf3,  0xf5,  0x9e,  0xea,  0x6e,  0xef,  0xe9,  0x8b,
    0x30,  0x3c,  0xe5,  0x31,  0xdb,  0x02,  0x02,  0x00,  0x80
};

/*
 * Prime bits: 1536
 * Exponent bits: 128
 */
static unsigned char dhParamsBER128[414] =
{
    0x30,  0x82,  0x01,  0x9a,  0x06,  0x09,  0x2a,  0x86,  0x48,  0x86,
    0xf7,  0x0d,  0x01,  0x03,  0x01,  0x30,  0x82,  0x01,  0x8b,  0x02,
    0x81,  0xc1,  0x00,  0xd3,  0xe2,  0x74,  0x3b,  0x87,  0x9f,  0xd3,
    0x20,  0x3b,  0xde,  0x2f,  0x71,  0x7e,  0xfb,  0x82,  0xd5,  0x60,
    0x2a,  0x08,  0xfb,  0x79,  0x58,  0x4c,  0x53,  0x35,  0x7a,  0x2b,
    0x9b,  0x88,  0xee,  0xb8,  0xba,  0xe7,  0x5c,  0xd9,  0x8f,  0x2d,
    0xef,  0x1f,  0x4f,  0x9f,  0xa4,  0x7e,  0xe3,  0x86,  0x59,  0x27,
    0xc6,  0xf8,  0xc9,  0x7d,  0x93,  0x47,  0xb4,  0x97,  0x07,  0xb7,
    0xfa,  0x8e,  0x47,  0x23,  0x36,  0xfe,  0xd0,  0x45,  0xc1,  0xa3,
    0xb2,  0x97,  0xa5,  0x4e,  0x82,  0xda,  0x5c,  0xee,  0x25,  0x95,
    0x0d,  0xcc,  0x20,  0x0c,  0xb8,  0xc3,  0xf5,  0x31,  0x63,  0x07,
    0xd4,  0x20,  0x33,  0x7a,  0x1b,  0x16,  0xd2,  0x3f,  0xb6,  0x2c,
    0xbd,  0x24,  0xf6,  0x91,  0x82,  0x89,  0x89,  0x8f,  0x79,  0xc3,
    0xd0,  0x7b,  0xb1,  0x9d,  0x39,  0x54,  0xcd,  0xe1,  0x31,  0x13,
    0x6e,  0xeb,  0x56,  0xc3,  0x68,  0x1b,  0x9d,  0x96,  0xd8,  0x16,
    0xf6,  0x80,  0xdf,  0x43,  0x71,  0x65,  0x36,  0xd2,  0x57,  0x7a,
    0xff,  0xae,  0xf4,  0x27,  0x14,  0x5d,  0x58,  0x55,  0xe2,  0x39,
    0xcc,  0xf2,  0x11,  0xf8,  0xef,  0x4e,  0x0a,  0x54,  0x8c,  0xab,
    0x21,  0xfb,  0x76,  0xfe,  0xa8,  0xfd,  0x55,  0xa5,  0xde,  0x25,
    0xa8,  0x30,  0x1a,  0x6f,  0x98,  0xa1,  0x51,  0xb4,  0x12,  0x6c,
    0xc2,  0x33,  0x95,  0xdd,  0x4f,  0xe5,  0xd4,  0xdc,  0xa0,  0x08,
    0xc4,  0xe7,  0xb1,  0xe3,  0xb5,  0x02,  0x81,  0xc0,  0x0c,  0xd0,
    0x15,  0x2d,  0xa1,  0x4e,  0xb1,  0x8a,  0xaf,  0x57,  0x83,  0x93,
    0x26,  0xb7,  0xeb,  0x80,  0xdd,  0x43,  0x15,  0x18,  0x71,  0x7d,
    0x18,  0x75,  0x5a,  0x4b,  0x7c,  0x60,  0xc8,  0x1c,  0x6b,  0x49,
    0xd2,  0xeb,  0x37,  0x9a,  0xb4,  0x36,  0xc5,  0x0b,  0x45,  0xd7,
    0x44,  0xdc,  0xb9,  0x75,  0xdb,  0xad,  0xc6,  0x32,  0x43,  0x92,
    0x30,  0x87,  0x31,  0x5f,  0xf9,  0x24,  0x21,  0x45,  0xc6,  0x50,
    0xfd,  0xa3,  0x70,  0xf4,  0xb7,  0x9a,  0xc7,  0x22,  0x1c,  0xcc,
    0xfc,  0x08,  0x1b,  0x8b,  0x20,  0x60,  0x12,  0xaa,  0xfe,  0xb7,
    0xc9,  0x18,  0x3f,  0xa8,  0x13,  0x41,  0x6c,  0x76,  0x2f,  0x2f,
    0x34,  0xb4,  0x7c,  0xd0,  0x8a,  0x0e,  0x73,  0xc9,  0xdf,  0xfb,
    0xbb,  0xff,  0x05,  0x12,  0xaf,  0x1c,  0xc6,  0xb1,  0xea,  0x29,
    0xee,  0x62,  0xa3,  0xd9,  0x2d,  0x94,  0x62,  0xb6,  0x96,  0xf7,
    0x09,  0x35,  0x6f,  0x08,  0xcd,  0xab,  0x0f,  0x1e,  0x10,  0xd0,
    0x7e,  0xef,  0x82,  0x7c,  0x74,  0x7c,  0x96,  0xee,  0xbb,  0xad,
    0x28,  0x93,  0xbf,  0x39,  0x26,  0x89,  0x72,  0x3f,  0x18,  0x34,
    0x6d,  0x21,  0x13,  0x4c,  0x0e,  0x30,  0x0d,  0x3a,  0x0c,  0xac,
    0xe0,  0x61,  0x10,  0x96,  0xbe,  0x51,  0x72,  0x65,  0x67,  0x32,
    0x75,  0x19,  0xe8,  0xa9,  0xb3,  0xcf,  0x71,  0x0c,  0x06,  0xef,
    0x16,  0x72,  0xa2,  0x97,  0xc4,  0x81,  0x14,  0x8b,  0xed,  0x42,
    0x02,  0x02,  0x00,  0x80
};

/*
 * --------------------------------------------------------------------
 * Diffie-Hellman implementation based on ZT
 * --------------------------------------------------------------------
 */
/* dhParamsBER40[219]
 * Prime bits    : 768
 * Exponent bits : 128
 */
unsigned char zt_prime_dhParamsBER40[] =
{
    0xd3,  0xe2,  0x74,  0x3b,  0x87,  0x9f,  0xd3,  0x20,  0x3b,  0xde,
    0x2f,  0x71,  0x7e,  0xfb,  0x82,  0xd5,  0x60,  0x2a,  0x08,  0xfb,
    0x79,  0x58,  0x4c,  0x53,  0x35,  0x7a,  0x2b,  0x9b,  0x88,  0xee,
    0xb8,  0xba,  0xe7,  0x5c,  0xd9,  0x8f,  0x2d,  0xef,  0x1f,  0x4f,
    0x9f,  0xa4,  0x7e,  0xe3,  0x86,  0x59,  0x27,  0xc6,  0xf8,  0xc9,
    0x7d,  0x93,  0x47,  0xb4,  0x97,  0x07,  0xb7,  0xfa,  0x8e,  0x47,
    0x23,  0x36,  0xfe,  0xd0,  0x45,  0xc1,  0xa3,  0xb2,  0x97,  0xa5,
    0x4e,  0x82,  0xda,  0x5c,  0xee,  0x25,  0x95,  0x0d,  0xcc,  0xa7,
    0x23,  0x34,  0xd4,  0xd7,  0xa2,  0x4e,  0x15,  0x3e,  0x9c,  0xb6,
    0xa1,  0x97,  0xfe,  0xfe,  0x8c,  0xc3
};
unsigned char zt_base_dhParamsBER40[] =
{
    0x86,  0x77,  0x81,  0x8a,  0x30,  0x89,  0x54,  0x50,  0xd3,  0x11,
    0xb7,  0x50,  0xbc,  0x96,  0x9b,  0x24,  0x23,  0xef,  0x86,  0xf1,
    0x49,  0x7c,  0x50,  0x16,  0xdf,  0xad,  0xec,  0x90,  0x4b,  0x40,
    0xf5,  0xe5,  0x6d,  0xf0,  0x3b,  0xa9,  0xec,  0xa9,  0xbc,  0x4e,
    0x0c,  0xdd,  0x21,  0x4e,  0x82,  0xbd,  0x1f,  0x36,  0xa6,  0x57,
    0x13,  0x84,  0xec,  0x04,  0x0e,  0x8d,  0x96,  0x85,  0x0d,  0x97,
    0xeb,  0x49,  0xe3,  0x5b,  0x3f,  0x53,  0x8b,  0x04,  0x66,  0x6e,
    0xe6,  0x7d,  0x84,  0x43,  0xad,  0xce,  0x3c,  0x8e,  0x41,  0x1e,
    0x48,  0x74,  0x08,  0xf3,  0xf5,  0x9e,  0xea,  0x6e,  0xef,  0xe9,
    0x8b,  0x30,  0x3c,  0xe5,  0x31,  0xdb
};

/* dhParamsBER128[414]
 * Prime bits    : 1536
 * Exponent bits :  128
 */
unsigned char zt_prime_dhParamsBER128[] =
{
    0xd3,  0xe2,  0x74,  0x3b,  0x87,  0x9f,  0xd3,  0x20,  0x3b, 0xde,
    0x2f,  0x71,  0x7e,  0xfb,  0x82,  0xd5,  0x60,  0x2a,  0x08, 0xfb,
    0x79,  0x58,  0x4c,  0x53,  0x35,  0x7a,  0x2b,  0x9b,  0x88, 0xee,
    0xb8,  0xba,  0xe7,  0x5c,  0xd9,  0x8f,  0x2d,  0xef,  0x1f, 0x4f,
    0x9f,  0xa4,  0x7e,  0xe3,  0x86,  0x59,  0x27,  0xc6,  0xf8, 0xc9,
    0x7d,  0x93,  0x47,  0xb4,  0x97,  0x07,  0xb7,  0xfa,  0x8e, 0x47,
    0x23,  0x36,  0xfe,  0xd0,  0x45,  0xc1,  0xa3,  0xb2,  0x97, 0xa5,
    0x4e,  0x82,  0xda,  0x5c,  0xee,  0x25,  0x95,  0x0d,  0xcc, 0x20,
    0x0c,  0xb8,  0xc3,  0xf5,  0x31,  0x63,  0x07,  0xd4,  0x20, 0x33,
    0x7a,  0x1b,  0x16,  0xd2,  0x3f,  0xb6,  0x2c,  0xbd,  0x24, 0xf6,
    0x91,  0x82,  0x89,  0x89,  0x8f,  0x79,  0xc3,  0xd0,  0x7b, 0xb1,
    0x9d,  0x39,  0x54,  0xcd,  0xe1,  0x31,  0x13,  0x6e,  0xeb, 0x56,
    0xc3,  0x68,  0x1b,  0x9d,  0x96,  0xd8,  0x16,  0xf6,  0x80, 0xdf,
    0x43,  0x71,  0x65,  0x36,  0xd2,  0x57,  0x7a,  0xff,  0xae, 0xf4,
    0x27,  0x14,  0x5d,  0x58,  0x55,  0xe2,  0x39,  0xcc,  0xf2, 0x11,
    0xf8,  0xef,  0x4e,  0x0a,  0x54,  0x8c,  0xab,  0x21,  0xfb, 0x76,
    0xfe,  0xa8,  0xfd,  0x55,  0xa5,  0xde,  0x25,  0xa8,  0x30, 0x1a,
    0x6f,  0x98,  0xa1,  0x51,  0xb4,  0x12,  0x6c,  0xc2,  0x33, 0x95,
    0xdd,  0x4f,  0xe5,  0xd4,  0xdc,  0xa0,  0x08,  0xc4,  0xe7, 0xb1,
    0xe3,  0xb5
};
unsigned char zt_base_dhParamsBER128[] =
{
    0x0c,  0xd0,  0x15,  0x2d,  0xa1,  0x4e,  0xb1,  0x8a,  0xaf,  0x57,
    0x83,  0x93,  0x26,  0xb7,  0xeb,  0x80,  0xdd,  0x43,  0x15,  0x18,
    0x71,  0x7d,  0x18,  0x75,  0x5a,  0x4b,  0x7c,  0x60,  0xc8,  0x1c,
    0x6b,  0x49,  0xd2,  0xeb,  0x37,  0x9a,  0xb4,  0x36,  0xc5,  0x0b,
    0x45,  0xd7,  0x44,  0xdc,  0xb9,  0x75,  0xdb,  0xad,  0xc6,  0x32,
    0x43,  0x92,  0x30,  0x87,  0x31,  0x5f,  0xf9,  0x24,  0x21,  0x45,
    0xc6,  0x50,  0xfd,  0xa3,  0x70,  0xf4,  0xb7,  0x9a,  0xc7,  0x22,
    0x1c,  0xcc,  0xfc,  0x08,  0x1b,  0x8b,  0x20,  0x60,  0x12,  0xaa,
    0xfe,  0xb7,  0xc9,  0x18,  0x3f,  0xa8,  0x13,  0x41,  0x6c,  0x76,
    0x2f,  0x2f,  0x34,  0xb4,  0x7c,  0xd0,  0x8a,  0x0e,  0x73,  0xc9,
    0xdf,  0xfb,  0xbb,  0xff,  0x05,  0x12,  0xaf,  0x1c,  0xc6,  0xb1,
    0xea,  0x29,  0xee,  0x62,  0xa3,  0xd9,  0x2d,  0x94,  0x62,  0xb6,
    0x96,  0xf7,  0x09,  0x35,  0x6f,  0x08,  0xcd,  0xab,  0x0f,  0x1e,
    0x10,  0xd0,  0x7e,  0xef,  0x82,  0x7c,  0x74,  0x7c,  0x96,  0xee,
    0xbb,  0xad,  0x28,  0x93,  0xbf,  0x39,  0x26,  0x89,  0x72,  0x3f,
    0x18,  0x34,  0x6d,  0x21,  0x13,  0x4c,  0x0e,  0x30,  0x0d,  0x3a,
    0x0c,  0xac,  0xe0,  0x61,  0x10,  0x96,  0xbe,  0x51,  0x72,  0x65,
    0x67,  0x32,  0x75,  0x19,  0xe8,  0xa9,  0xb3,  0xcf,  0x71,  0x0c,
    0x06,  0xef,  0x16,  0x72,  0xa2,  0x97,  0xc4,  0x81,  0x14,  0x8b,
    0xed,  0x42
};

typedef struct
{
    unsigned char  publicValue[sizeof(zt_base_dhParamsBER128)];
    unsigned int   publicValueLen;
    unsigned char  agreedSecret[sizeof(zt_base_dhParamsBER128)];
    unsigned int   agreedSecretLen;
    unsigned int   keyLenSelection;
    ztcaCryptoCtx *cryptoCtx;
} GPE_DH_CONTEXT_T;


#if defined(uint64)
#undef uint64
#endif

#ifndef uint8
typedef unsigned char uint8;
#endif /* uint8 */

#ifndef offsetof
#define offsetof(t, e)  ((char *)(&((t *)0)->e) - (char *)(t *)0)
#endif

#if defined(uint_64)
typedef uint_64 TM64U
#else
#if defined(WIN32)
#if defined(UINT64)
typedef UINT64 TM64U;
#else
typedef unsigned long long TM64U;
#endif /* UINT64 */
#else
typedef unsigned long long TM64U;
#endif /* !WIN32   */
#endif  /* !uint_64 */
typedef struct aesgcm_handle_t * AES_GCM_HANDLE_P_T;
typedef struct aesgcm_handle_t
{
    uint8       sendAesKey[32];
    uint8       recvAesKey[32];
    uint8       state;
    AES_GCM_HANDLE_P_T next;
    AES_GCM_HANDLE_P_T prev;
} AES_GCM_HANDLE_T;


unsigned char * nzdh_AllocAgreedSecretKey(unsigned int *sizep);
int nzdh_KeyAgreePhase1(unsigned int lenBits, GPE_DH_CONTEXT_T **nzdh_ctx);
int nzdh_KeyAgreePhase2(unsigned int lenBits, ztcaCryptoCtx *cryptoCtx, ztcaData pub_remote,
                        unsigned char *agreedSecret, unsigned int *agreedSecretLen, GPE_DH_CONTEXT_T  *context);
void nzdh_destroy(ztcaCryptoCtx *cryptoCtx, ztcaData pub, ztcaData sess);
void nzdh_destroy_1(ztcaCryptoCtx *cryptoCtx);
void _gp_dumpBuf(int out, char *label, char *buf, int buflen);

int _e_cryp_digest(unsigned char *outbuf, unsigned int *outbuf_sizep,
                   const unsigned char *inbuf, unsigned int  inbuf_size, DIG_ALGS digalg);
int digestBuff(ub1* in, ub4 inlen,
               ub1 *out, ub4* outlen, ztcaDigestAlgType hashType);
int runDigestTestForType(ztcaDigestAlgType hashType);
int _sess_setupCtx(void *handle,unsigned char *agreedSecrets, unsigned int agreedSecretLens, unsigned char *agreedSecretr,
                   unsigned int agreedSecretLenr, int flag);

#endif
